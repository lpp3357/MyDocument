using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.HttpsPolicy;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using Swashbuckle.AspNetCore.Swagger;

namespace OverHeadRecord.API
{
    public static class aabb
    {
        public static string aa { get; set; }
    }
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        private readonly string MyAllowSpecificOrigins = "_myAllowSpecificOrigins";

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            //配置Swagger
            services.AddSwaggerGen(c =>
            {
                //配置swagger文档
                c.SwaggerDoc(
                    //文档下的文件夹名称
                    "v1",
                    //指定swagger显示信息
                    new Info { Title = "OverHead API", Version = "v1" }
                    );
                //配置swagger显示代码注释
                //Locate the XML file being generated by ASP.NET...
                //获取代码生成的xml文件路径
                var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.XML";
                var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);

                aabb.aa = xmlPath;
                //... and tell Swagger to use those XML comments.
                c.IncludeXmlComments(xmlPath);
            });
            //配置Cors 跨域
            services.AddCors(options =>
            {
                options.AddPolicy(MyAllowSpecificOrigins,
                builder =>
                {
                    //可请求域设置
                    //builder.WithOrigins("http://example.com");//指定只有来至http://example.com的域可以请求
                    builder.AllowAnyOrigin();//所有的域都可以请求

                    //可请求方法设置
                    builder.WithHeaders("GET");//指定哪些HTTP方法允许访问
                    //builder.AllowAnyHeader();//允许所有的HTTP方法

                    //可请求头设置
                    //一个CORS先行请求也许包含了Access - Request - Headers头，列出应用程序的HTTP请求头。
                    //builder.WithHeaders("accept", "content-type", "origin", "x-custom-header");//指定允许的请求头
                    builder.AllowAnyHeader();//允许所有的请求头

                    //设置先行请求的过期时间    Access-Control-Max-Age头指定了先行请求的响应可以缓存的时间。
                    //builder.SetPreflightMaxAge(TimeSpan.FromSeconds(2520));
                });
            });

            services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_1);

        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {

            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseHsts();
            }

            //注册MVC中间件
            app.UseMvc();

            //注册跨域配置中间件
            app.UseCors(MyAllowSpecificOrigins);

            //启用中间件服务生成Swagger作为JSON终结点
            app.UseSwagger();
            //启用中间件服务对swagger-ui，指定Swagger JSON终结点
            app.UseSwaggerUI(sw =>
            {
                //添加Swagger JSON端点。可以是完全限定的还是相对于UI页面的
                sw.SwaggerEndpoint("/swagger/v1/swagger.json", "App Over");
            });


        }
    }
}
